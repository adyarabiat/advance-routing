{"ast":null,"code":"var _jsxFileName = \"/Users/adyarabiat/Documents/React/react-maximilian-update/13.Building a Multi-Page SPA with React Router/09-time-to-practice-starting-code/src/pages/QuoteDetails.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: \"q1\",\n  author: \"Max\",\n  text: \"Learning React is fun!\"\n}, {\n  id: \"q2\",\n  author: \"Ady\",\n  text: \"Learning React Native is fun!\"\n}];\n\nconst QuoteDetails = () => {\n  _s();\n\n  const match = useRouteMatch();\n  const param = useParams();\n  console.log(match);\n  const quote = DUMMY_QUOTES.find(quote => {\n    return quote.id === param.quote;\n  });\n\n  if (!quote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" No Quote found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this);\n  } // we add this route here around the link just to show it when we are on the exact path without the comment so it will disappear when we finish\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}`,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `${match.url}/comments`,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n};\n\n_s(QuoteDetails, \"J9KU2VpQ2oK7S84Sc/kd3uFEOQE=\", false, function () {\n  return [useRouteMatch, useParams];\n});\n\n_c = QuoteDetails;\nexport default QuoteDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetails\");","map":{"version":3,"sources":["/Users/adyarabiat/Documents/React/react-maximilian-update/13.Building a Multi-Page SPA with React Router/09-time-to-practice-starting-code/src/pages/QuoteDetails.js"],"names":["React","useParams","Route","Link","useRouteMatch","Comments","HighlightedQuote","DUMMY_QUOTES","id","author","text","QuoteDetails","match","param","console","log","quote","find","path","url"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,aAAjC,QAAsD,kBAAtD;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;;AAEA,MAAMC,YAAY,GAAG,CAClB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,KAApB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CADkB,EAElB;AAAEF,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,KAApB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CAFkB,CAArB;;AAIA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACxB,QAAMC,KAAK,GAAGR,aAAa,EAA3B;AACA,QAAMS,KAAK,GAAGZ,SAAS,EAAvB;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,QAAMI,KAAK,GAAGT,YAAY,CAACU,IAAb,CAAmBD,KAAD,IAAW;AACxC,WAAOA,KAAK,CAACR,EAAN,KAAaK,KAAK,CAACG,KAA1B;AACF,GAFa,CAAd;;AAIA,MAAI,CAACA,KAAL,EAAY;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACF,GAZuB,CAcxB;;;AACA,sBACG,QAAC,KAAD,CAAO,QAAP;AAAA,4BACG,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEA,KAAK,CAACN,IAA9B;AAAoC,MAAA,MAAM,EAAEM,KAAK,CAACP;AAAlD;AAAA;AAAA;AAAA;AAAA,YADH,eAGG,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEG,KAAK,CAACM,IAAK,EAA3B;AAA8B,MAAA,KAAK,MAAnC;AAAA,6BACG;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACG,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,EAAE,EAAG,GAAEN,KAAK,CAACO,GAAI,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YAHH,eAWG,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEP,KAAM,WAAtB;AAAA,6BACG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YAXH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAiBF,CAhCD;;GAAMD,Y;UACWP,a,EACAH,S;;;KAFXU,Y;AAkCN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\n\nconst DUMMY_QUOTES = [\n   { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\n   { id: \"q2\", author: \"Ady\", text: \"Learning React Native is fun!\" },\n];\nconst QuoteDetails = () => {\n   const match = useRouteMatch();\n   const param = useParams();\n\n   console.log(match);\n\n   const quote = DUMMY_QUOTES.find((quote) => {\n      return quote.id === param.quote;\n   });\n\n   if (!quote) {\n      return <p> No Quote found</p>;\n   }\n\n   // we add this route here around the link just to show it when we are on the exact path without the comment so it will disappear when we finish\n   return (\n      <React.Fragment>\n         <HighlightedQuote text={quote.text} author={quote.author} />\n\n         <Route path={`${match.path}`} exact>\n            <div className=\"centered\">\n               <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n                  Add Comment\n               </Link>\n            </div>\n         </Route>\n\n         <Route path={`${match}/comments`}>\n            <Comments />\n         </Route>\n      </React.Fragment>\n   );\n};\n\nexport default QuoteDetails;\n"]},"metadata":{},"sourceType":"module"}