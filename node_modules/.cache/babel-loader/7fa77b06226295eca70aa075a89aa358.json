{"ast":null,"code":"var _jsxFileName = \"/Users/adyarabiat/Documents/React/react-maximilian-update/13.Building a Multi-Page SPA with React Router/09-time-to-practice-starting-code/src/components/quotes/QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\"; // we add it to sort the quotes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = props => {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  console.log(location.search); // this will give me a better constructure object value instead of ?sort=asc\n\n  const queryParams = new URLSearchParams(location.search); // we use get to get the key which from it ?sort=asc so it is sort\n\n  const SortingAscending = queryParams.get(\"sort\"); // checking\n\n  const isSortingAscending = SortingAscending === \"asc\"; // now we are calling the function to sort\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push(`/quotes?sort=${isSortingAscending ? \"desc\" : \"asc\"}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: [\"Sort \", isSortingAscending ? \"Descending\" : \"Ascending\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: props.quotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n};\n\n_s(QuoteList, \"azjqGSEfmvz5+G/YRUZm7OceOpI=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"sources":["/Users/adyarabiat/Documents/React/react-maximilian-update/13.Building a Multi-Page SPA with React Router/09-time-to-practice-starting-code/src/components/quotes/QuoteList.js"],"names":["Fragment","useHistory","useLocation","QuoteItem","classes","sortQuotes","quotes","ascending","sort","quoteA","quoteB","id","QuoteList","props","history","location","console","log","search","queryParams","URLSearchParams","SortingAscending","get","isSortingAscending","sortedQuotes","changeSortingHandler","push","sorting","list","map","quote","author","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CAEA;;;;AACA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AACvC,SAAOD,MAAM,CAACE,IAAP,CAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACpC,QAAIH,SAAJ,EAAe;AACZ,aAAOE,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACF,KAFD,MAEO;AACJ,aAAOF,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACF;AACH,GANM,CAAP;AAOF,CARD;;AAUA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,OAAO,GAAGb,UAAU,EAA1B;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAArB,EAH0B,CAK1B;;AACA,QAAMC,WAAW,GAAG,IAAIC,eAAJ,CAAoBL,QAAQ,CAACG,MAA7B,CAApB,CAN0B,CAQ1B;;AACA,QAAMG,gBAAgB,GAAGF,WAAW,CAACG,GAAZ,CAAgB,MAAhB,CAAzB,CAT0B,CAW1B;;AACA,QAAMC,kBAAkB,GAAGF,gBAAgB,KAAK,KAAhD,CAZ0B,CAc1B;;AACA,QAAMG,YAAY,GAAGnB,UAAU,CAACQ,KAAK,CAACP,MAAP,EAAeiB,kBAAf,CAA/B;;AAEA,QAAME,oBAAoB,GAAG,MAAM;AAChCX,IAAAA,OAAO,CAACY,IAAR,CAAc,gBAAeH,kBAAkB,GAAG,MAAH,GAAY,KAAM,EAAjE;AACF,GAFD;;AAIA,sBACG,QAAC,QAAD;AAAA,4BACG;AAAK,MAAA,SAAS,EAAEnB,OAAO,CAACuB,OAAxB;AAAA,6BACG;AAAQ,QAAA,OAAO,EAAEF,oBAAjB;AAAA,4BACSF,kBAAkB,GAAG,YAAH,GAAkB,WAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YADH,eAMG;AAAI,MAAA,SAAS,EAAEnB,OAAO,CAACwB,IAAvB;AAAA,gBACIf,KAAK,CAACP,MAAN,CAAauB,GAAb,CAAkBC,KAAD,iBACf,QAAC,SAAD;AAEG,QAAA,EAAE,EAAEA,KAAK,CAACnB,EAFb;AAGG,QAAA,MAAM,EAAEmB,KAAK,CAACC,MAHjB;AAIG,QAAA,IAAI,EAAED,KAAK,CAACE;AAJf,SACQF,KAAK,CAACnB,EADd;AAAA;AAAA;AAAA;AAAA,cADF;AADJ;AAAA;AAAA;AAAA;AAAA,YANH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAmBF,CAxCD;;GAAMC,S;UACaX,U,EACCC,W;;;KAFdU,S;AA0CN,eAAeA,SAAf","sourcesContent":["import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\n// we add it to sort the quotes\nconst sortQuotes = (quotes, ascending) => {\n   return quotes.sort((quoteA, quoteB) => {\n      if (ascending) {\n         return quoteA.id > quoteB.id ? 1 : -1;\n      } else {\n         return quoteA.id < quoteB.id ? 1 : -1;\n      }\n   });\n};\n\nconst QuoteList = (props) => {\n   const history = useHistory();\n   const location = useLocation();\n   console.log(location.search);\n\n   // this will give me a better constructure object value instead of ?sort=asc\n   const queryParams = new URLSearchParams(location.search);\n\n   // we use get to get the key which from it ?sort=asc so it is sort\n   const SortingAscending = queryParams.get(\"sort\");\n\n   // checking\n   const isSortingAscending = SortingAscending === \"asc\";\n\n   // now we are calling the function to sort\n   const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n   const changeSortingHandler = () => {\n      history.push(`/quotes?sort=${isSortingAscending ? \"desc\" : \"asc\"}`);\n   };\n\n   return (\n      <Fragment>\n         <div className={classes.sorting}>\n            <button onClick={changeSortingHandler}>\n               Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n            </button>\n         </div>\n         <ul className={classes.list}>\n            {props.quotes.map((quote) => (\n               <QuoteItem\n                  key={quote.id}\n                  id={quote.id}\n                  author={quote.author}\n                  text={quote.text}\n               />\n            ))}\n         </ul>\n      </Fragment>\n   );\n};\n\nexport default QuoteList;\n"]},"metadata":{},"sourceType":"module"}